"""
Django settings for DjangoSQLrestAPI project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from decouple import config
from pathlib import Path
import mimetypes

mimetypes.add_type("application/javascript", ".js", True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django_filters',
    'coreapi',
    'debug_toolbar',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'channels', 
    'StockInventarioB.apps.StockinventariobConfig',
    'AsistVirtual',
    'SharePoint_List',
    'sharepoint_rest_api',
    'flet_django',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoSQLrestAPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Especifica la aplicación WSGI (Síncrono)
WSGI_APPLICATION = 'DjangoSQLrestAPI.wsgi.application'

# Configuración de Channels (usando Redis como backend)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("192.168.2.134", 6379)],
            "capacity": 1500, 
            "group_expiry": 1800, 
        },
    },
}

# Especifica la aplicación ASGI (Asíncrono)
ASGI_APPLICATION = "proyecto.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE'                : config('ENGINE'),
        'NAME'                  : config('NAME'),
        'HOST'                  : config('HOST'),
        'USER'                  : config('USER'),
        'PASSWORD'              : config('PASSWORD'),
        'Trusted_Connection'    : config('Trusted_Connection'),
        'PORT'                  : config('PORT'),
        'OPTIONS': {
            'driver'        : config('driver'),
            'extra_params'  : config('extra_params')    
        }
    }
}

DATABASE_CONNECTION_POOLING = True

# Sharepoint Online Conection

SHAREPOINT_CONFIG = {
    'site_url': config('SHAREPOINT_SITE_URL'),
    'tenant_id': config('SHAREPOINT_TENANT_ID'),
    'client_id': config('SHAREPOINT_CLIENT_ID'),
    'thumbprint': config('SHAREPOINT_THUMBPRINT'),
    'certificate_path': config('SHAREPOINT_CERTIFICATE_PATH'),
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Lima'

USE_I18N = True

USE_TZ = True

INTERNAL_IPS = [
    # ...
    #'0.0.0.0',
    # ...
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = config('STATIC_URL')
STATIC_ROOT = config('STATIC_ROOT')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# restfull api
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'PAGE_SIZE': 600,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.AdminRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES':[
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

# Log de los errores del Django
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
        'file2': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'api_audit.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['file2'],
            'level': 'INFO',
        },
    },
}

CSRF_TRUSTED_ORIGINS = [
    '192.168.2.134'
]

CORS_ALLOWED_ORIGINS = [
    "192.168.2.134",
]

# Importante para proxies
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# USE_X_FORWARDED_HOST = True